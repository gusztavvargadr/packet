parameters:
  stages: []
    # - name: stage-name
    #   displayName: stage-display-name
    #   condition: condition-expression
    #   samples:
    #     - name: [ sample-name-part-1, sample-name-part-2, ... ]
    #   packageRegistry: package-registry-service-connection-name

stages:
  - ${{ each stage in parameters.stages }}:
    - stage: ${{ stage.name }}
      displayName: ${{ stage.displayName }}
      ${{ if stage.condition }}:
        condition: ${{ stage.condition }}

      variables:
        - group: stage-${{ stage.name }}

      jobs:
        - ${{ each sample in stage.samples }}:
          - deployment: deploy_${{ join('_', sample.name) }}
            displayName: Deploy ${{ join('-', sample.name) }}
            environment: ${{ stage.name }}

            pool:
              vmImage: ubuntu-16.04

            workspace:
              clean: all

            strategy:
              runOnce:
                deploy:
                  steps:
                    - checkout: self
                      submodules: recursive

                    - script: |
                        dotnet --info

                        echo "##vso[task.setvariable variable=PATH;]$PATH:~/.dotnet/tools"
                        dotnet tool install Cake.Tool --global --version 0.35.0

                        dotnet tool list --global
                      displayName: Initialize .NET

                    - task: DownloadPipelineArtifact@2
                      displayName: Download Registry Artifacts
                      inputs:
                        artifact: build-${{ join('-', sample.name) }}-registry
                        path: $(Build.SourcesDirectory)/artifacts/registry/

                    - ${{ if stage.packageRegistry }}:
                      - task: Docker@2
                        displayName: Login Docker
                        inputs:
                          command: login
                          containerRegistry: ${{ stage.packageRegistry }}

                    - script: |
                        dotnet cake deploy.cake --target=publish --sample-name=${{ join('-', sample.name) }} --package-registry=$(package-registry)
                      displayName: Publish Cake
                      env:
                        PACKET_AUTH_TOKEN: $(packet-auth-token)

                    - script: |
                        dotnet cake deploy.cake --target=clean --sample-name=${{ join('-', sample.name) }} --package-registry=$(package-registry)
                      displayName: Clean Cake
                      condition: always()
                      env:
                        PACKET_AUTH_TOKEN: $(packet-auth-token)

                    - ${{ if stage.packageRegistry }}:
                      - task: Docker@2
                        displayName: Logout Docker
                        condition: always()
                        inputs:
                          command: logout
                          containerRegistry: ${{ stage.packageRegistry }}
